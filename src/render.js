
// Import the wasm wrapper module generated by wasm-bindgen.
require("../pkg/rust_raytracer_wasm");

// This does not really load the wasm module. This in fact is loaded through
// the webpack file-loader. This loader will copy the wasm file to the output
// folder and this require only gives us the path to the wasm module which can
// then be passd to the init function of the wasm_bindgen wrapper.
const wasmPath = require('../pkg/rust_raytracer_wasm_bg.wasm');

// Initialize the wasm module. We get back a promise that resolves once the
// wasm module was successfully initialized.
const raytracerModule = self.wasm_bindgen(wasmPath);

// Once we get a message from the main thread we can start rendering
self.addEventListener('message', async (event) => {
  try {
    const gml = event.data[0];

    // Make sure the wasm module is fully initialized.
    await raytracerModule;
    const raytracer = self.wasm_bindgen;

    // render the gml
    const renderPixel = (x, y, r, g, b) => {
      self.postMessage([x, y, r, g, b]);
    }
    raytracer.render_gml(gml, renderPixel);
    self.close();
  } catch (e) {
    self.postMessage({
      type: 'error',
      id: event.data.id,
      name: event.data.name,
      message: e.message,
      stack: e.stack
    })
  }
});
